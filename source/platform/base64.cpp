#include <internal/base64.h>

namespace tvision
{

// Based on the base64 decoder by polfosol and Gaspard Petit:
// https://github.com/gaspardpetit/base64/blob/21943915e99b45600c30a33f0299f4abc47e63db/src/polfosol/polfosol.h

static constexpr uint8_t b64d[256] =
{
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 62 , 128, 62 , 128, 63 ,
    52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 128, 128, 128, 128, 128, 128,
    128, 0  , 1  , 2  , 3  , 4  , 5  , 6  , 7  , 8  , 9  , 10 , 11 , 12 , 13 , 14 ,
    15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 128, 128, 128, 128, 63 ,
    128, 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 ,
    41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51 , 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128
};

std::string from_base64(TSpan<const uint8_t> input)
{
    const uint8_t *p = input.data();
    size_t len = input.size();

    bool pad = len > 0 && (len % 4 != 0 || p[len - 1] == '=');
    size_t L = ((len + 3) / 4 - pad) * 4;
    std::string str(3*((len+3)/4), '\0');

    size_t j = 0;
    for (size_t i = 0; i < L; i += 4)
    {
        uint32_t n = b64d[p[i]] << 18 | b64d[p[i + 1]] << 12 | b64d[p[i + 2]] << 6 | b64d[p[i + 3]];
        str[j++] = n >> 16;
        str[j++] = n >> 8 & 0xFF;
        str[j++] = n & 0xFF;
    }
    if (pad)
    {
        uint32_t n = b64d[p[L]] << 18 | b64d[p[L + 1]] << 12;
        str[j++] = n >> 16;
        if (len > L + 2 && p[L + 2] != '=')
        {
            n |= b64d[p[L + 2]] << 6;
            str[j++] = n >> 8 & 0xFF;
        }
    }

    str.resize(j);
    return str;
}

} // namespace tvision
